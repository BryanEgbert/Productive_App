@page "/test"
@inject  User.UserClient UserClient
@using Google.Protobuf.Collections;
@using Google.Protobuf.WellKnownTypes;
@using System.Security.Claims
<AuthorizeView>
    <NotAuthorized>
        <p>Not authorized</p>
    </NotAuthorized>
    <Authorized>
        <h2>hello @context.User.Identity.Name</h2>
         @foreach (var claim in context.User.Claims)
        {
            <li><b>@claim.Type</b>: @claim.Value</li>
        }
    </Authorized>
</AuthorizeView>
@* 
@code {
    private string name;
    private string email;
    private string password;
    private string todoDescription;
    private string todoId;
    private string serverResponseUuid;
    private string serverResponseName;
    private RepeatedField<ToDoStructure> serverTodoResponse = new RepeatedField<ToDoStructure>();
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    
    private async Task GetUser()
    {
        var request = new LogInParameter(){ Username = name, Email = email };
        var response = await UserClient.GetUserAsync(request);

        serverResponseUuid = response.Uuid;
        serverResponseName = response.Name;
        email = null;

        await InvokeAsync(StateHasChanged);
        await GetToDoList();
    }

    private async Task AddUser()
    {
        var request = new UserRequest(){ Name = name, Email = email, Password = password };
        var response = await UserClient.AddUserAsync(request);
        name = null;
        email = null;
        password  = null;

        await InvokeAsync(StateHasChanged);
        await GetUser();
    }

    private async Task GetToDoList()
    {
        var request = new UuidParameter(){ Uuid = serverResponseUuid };
        var response = await UserClient.GetToDoListAsync(request);
        serverTodoResponse = response.ToDoList;
    }
    private async Task AddToDo(string description)
    {
        var request = new ToDoStructure()
        { 
            Uuid = serverResponseUuid, 
            Description = description, 
        };
        await UserClient.AddToDoAsync(request);
        await GetToDoList();
    }

    private async Task EditToDo(int id, string description)
    {
        var request = new ToDoStructure() 
            { Id = id, Uuid = serverResponseUuid, Description = description};

        todoId = null;
        todoDescription = null;
        await InvokeAsync(StateHasChanged);

        await UserClient.PutToDoAsync(request);
        await GetToDoList();
    }

    public async Task PutToDoIsCompleted(int id, string description, bool isCompleted, MouseEventArgs e)
    {
        if (isCompleted == false && e.Button== 0)
        {
            isCompleted = true;
        } 
        else if (isCompleted == true && e.Button == 0)
        {
            isCompleted = false;
        }

        var request = new ToDoStructure()
        { 
            Id = id, 
            Uuid = serverResponseUuid,
            Description = description, 
            IsCompleted = isCompleted 
        };

        await UserClient.PutToDoAsync(request);
        await GetToDoList();
    }

    public async Task DeleteToDo(int id)
    {
        var request = new DeleteToDoParameter() { Id = id };

        todoId = null;
        await InvokeAsync(StateHasChanged);

        await UserClient.DeleteToDoAsync(request);
        await GetToDoList();
    }
} *@